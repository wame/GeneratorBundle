<?php
declare(strict_types=1);

namespace Wame\GeneratorBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use Gedmo\Mapping\Annotation as Gedmo;
use Doctrine\Common\Collections\Collection;
use Doctrine\Common\Collections\ArrayCollection;
use Symfony\Component\Validator\Constraints as Assert;
use Gedmo\Timestampable\Traits\TimestampableEntity as Timestampable;
use Gedmo\Blameable\Traits\BlameableEntity as Blameable;
use Gedmo\SoftDeleteable\Traits\SoftDeleteableEntity as Softdeleteable;

/**
 * @ORM\Table(name="authors")
 * @ORM\Entity(repositoryClass="Wame\GeneratorBundle\Repository\AuthorRepository")
 * @Gedmo\SoftDeleteable(fieldName="deletedAt", timeAware=false)
 */
class Author
{
    use Timestampable;
    use Blameable;
    use Softdeleteable;

    /**
     * @var int
     *
     * @ORM\Column(name="id", type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    private $id;

    /**
     * @var string
     *
     * @ORM\Column(name="first_name", type="string")
     * @Assert\NotBlank
     */
    private $firstName;

    /**
     * @var string
     *
     * @ORM\Column(name="last_name", type="string")
     * @Assert\NotBlank
     */
    private $lastName;

    /**
     * @var string
     *
     * @ORM\Column(name="email", type="string", nullable=true)
     * @Assert\Email
     */
    private $email;

    /**
     * @var Collection|Book[]
     *
     * @ORM\OneToMany(targetEntity="Wame\GeneratorBundle\Entity\Book", mappedBy="author", orphanRemoval=true, cascade={"persist"})
     */
    private $books;

    public function __construct()
    {
        $this->books = new ArrayCollection();
    }

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getFirstName(): ?string
    {
        return $this->firstName;
    }

    public function setFirstName(string $firstName): self
    {
        $this->firstName = $firstName;

        return $this;
    }

    public function getLastName(): ?string
    {
        return $this->lastName;
    }

    public function setLastName(string $lastName): self
    {
        $this->lastName = $lastName;

        return $this;
    }

    public function getEmail(): ?string
    {
        return $this->email;
    }

    public function setEmail(?string $email): self
    {
        $this->email = $email;

        return $this;
    }

    /** @return Collection|Book[] */
    public function getBooks(): ?Collection
    {
        return $this->books;
    }

    public function addBook(Book $book): self
    {
        $this->books->add($book);
        $book->setAuthor($this);
        
        return $this;
    }

    public function removeBook(Book $book): self
    {
        $this->books->removeElement($book);

        return $this;
    }

    public function __toString(): string
    {
        return $this->getFirstName() ?: '';
    }
}
