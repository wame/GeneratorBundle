{# @var meta_entity \Wame\SensioGeneratorBundle\MetaData\MetaEntity #}
{% use 'entity/property.php.twig' %}
{% use 'entity/constructor.php.twig' %}
<?php
declare(strict_types=1);

namespace {{ meta_entity.bundleNamespace }}\Entity;

use Doctrine\ORM\Mapping as ORM;
{% if meta_entity.hasTrait('SoftDeleteable') %}
use Gedmo\Mapping\Annotation as Gedmo;
{% endif -%}
{% if meta_entity.hasCollectionProperties  -%}
use Doctrine\Common\Collections\Collection;
use Doctrine\Common\Collections\ArrayCollection;
{% endif -%}
{% if meta_entity.hasValidation  -%}
use Symfony\Component\Validator\Constraints as Assert;
{% endif %}
{% for trait in meta_entity.traits -%}
    use {{ trait.namespace }} as {{ trait.name | classify }};
{% endfor %}
{% for interface in meta_entity.interfaces -%}
    use {{ interface.namespace }} as {{ interface.name }};
{% endfor %}

/**
 * {{ meta_entity.entityName }}
 *
 * @ORM\Table(name="{{ meta_entity.tableName }}")
 * @ORM\Entity(repositoryClass="{{ meta_entity.bundleNamespace }}\Repository\{{ meta_entity.entityName }}Repository")
{% if meta_entity.hasTrait('SoftDeleteable') %}
 * @Gedmo\SoftDeleteable(fieldName="deletedAt", timeAware=false)
{% endif %}
 */
class {{ meta_entity.entityName }}
{%- if meta_entity.interfaces.empty == false -%}
    implements
    {%- for interface in meta_entity.interfaces -%}
        {{- loop.first ? ' ' : ', '  -}}
        {{- interface.name -}}
    {%- endfor -%}
{%- endif %}
{
    {%- for trait in meta_entity.traits -%}
        {{- '\n    ' -}}
        use {{ trait.name | classify }};
        {%- if loop.last -%}
            {{- '\n' -}}
        {%- endif -%}
    {%- endfor -%}

    {%- for property in meta_entity.properties -%}
        {{- block('property') ~ '\n' -}}
    {%- endfor -%}

    {{- block('constructor') -}}

    {%- for property in meta_entity.properties -%}
        {{- block('property_methods')  ~ '\n' -}}
    {%- endfor -%}
}
